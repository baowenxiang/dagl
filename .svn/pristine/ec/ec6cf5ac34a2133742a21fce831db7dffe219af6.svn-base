package cn.proem.dagl.web.fileCompilation.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;

import cn.proem.core.annotation.LogService;
import cn.proem.core.entity.User;
import cn.proem.core.model.ConditionType;
import cn.proem.core.model.DataGrid;
import cn.proem.core.model.DataGridQuery;
import cn.proem.core.model.FieldType;
import cn.proem.core.model.QueryBuilder;
import cn.proem.core.model.QueryCondition;
import cn.proem.dagl.web.archives.service.CustomArchiveService;
import cn.proem.dagl.web.dicManager.entity.DictionaryValue;
import cn.proem.dagl.web.dicManager.service.DicManagerService;
import cn.proem.dagl.web.fileCompilation.entity.CompileResult;
import cn.proem.dagl.web.fileCompilation.entity.CompileResultMiddle;
import cn.proem.dagl.web.fileCompilation.service.FileCompilationService;
import cn.proem.dagl.web.fileIdentify.dto.DtoFileBase;
import cn.proem.dagl.web.preArchive.entity.Ywgj;
import cn.proem.dagl.web.preArchive.service.YwgjService;
import cn.proem.dagl.web.table.entity.inf.BaseEntityInf;
import cn.proem.suw.web.common.constant.Path;
import cn.proem.suw.web.common.exception.ServiceException;
import cn.proem.suw.web.common.model.BaseCtrlModel;
import cn.proem.suw.web.common.model.ResultModel;
import cn.proem.suw.web.common.service.CommonService;
import cn.proem.suw.web.common.util.StringUtil;

/**
 * 档案编研控制层 
 * @author lenovo
 *
 */
@Controller
@RequestMapping("/w/compilation")
public class FileCompilationController extends BaseCtrlModel {
	@Autowired
	private CustomArchiveService customArchiveService;
	@Autowired
	private CommonService commonService;
	@Autowired
	private DicManagerService dicService;
	@Autowired
	private FileCompilationService fileCompilationService;
	@Autowired
	private YwgjService ywgjService;
	
	
	private String valueOf(Object obj) {
	    return (obj == null) ? "" : obj.toString();
	}
	 /**
     * 
     * 
     * @Method: nowTime 
     * @Description: 获得当前时间
     * @return
     */
    private String nowTime(){
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
        return df.format(new Date());// new Date()为获取当前系统时间
    }
	
	/**
	 * @Description 编研制作初始化页面
	 * @MethodName initMessagePage
	 * @author bao
	 * @date 2017年6月5日
	 * @return ModelAndView
	 */
	@RequestMapping("/compileMade/initView")
	public ModelAndView initCompileMade(){
		ModelAndView view = this.createNormalView("/web/fileCompilation/compileMade.vm");
		
		return view;
		
	}
	
	
	/**
	 * @Description 编研成果初始化页面
	 * @MethodName initMessagePage
	 * @author bao
	 * @date 2017年6月5日
	 * @return ModelAndView
	 */
	@RequestMapping("/compileResult/initView")
	public ModelAndView initCompileResult(){
		ModelAndView view = this.createNormalView("/web/fileCompilation/compileResult.vm");
		
		return view;
		
	}
	
	/**
	 * @Description	编写编研表单页面 
	 * @MethodName toCompileFormView
	 * @author bao
	 * @date 2017年6月5日
	 * @return ModelAndView
	 */
	@RequestMapping("/compileMade/toCompileFormView")
	public ModelAndView toCompileFormView(){
		ModelAndView view = this.createNormalView("/web/fileCompilation/compileForm.vm");
		
		return view;
		
	}
	
	/**
	 * @Description	编写编研表单页面 
	 * @MethodName toCompileFormView
	 * @author bao
	 * @date 2017年6月5日
	 * @return ModelAndView
	 */
	@RequestMapping("/compileResult/toAddFileFormView")
	public ModelAndView toAddFileFormView(String id){
		ModelAndView view = this.createNormalView("/web/fileCompilation/addFileForm.vm");
		view.addObject("id", id);
		return view;
		
	}
	
	
	/**
	 * 获得字典标题值
	 * @param did
	 * @param val
	 * @return
	 */
	private String getDicTitle(String did, String val){
	    List<DictionaryValue> dictionaryValues = dicService.getDicValueList(did);
	    for(DictionaryValue dic : dictionaryValues){
	        // 获得字典内容
	        if(dic.getDvno().equals(val)){
	            return dic.getDvalue();
	        }
	    }
	    return null;
	}
	
	
	/**
	 * @Description 获得档案集合
	 * @MethodName getFilesInfo
	 * @author bao
	 * @date 2017年5月21日
	 * @param dtGridPager
	 * @param request
	 * @return String
	 */
	@RequestMapping(value = "/getFilesInfo")
	@ResponseBody
	@LogService(description = "获取档案集合")
	public String getFilesInfo(String dtGridPager, HttpServletRequest request){
		DataGridQuery query = parseToQuery(dtGridPager == null ? "" : dtGridPager);
		DataGrid<DtoFileBase> dataGrid = new DataGrid<DtoFileBase>(query.getNowPage(), query.getPageSize());
		List<DtoFileBase> dtoFileBases = new ArrayList<DtoFileBase>();
		//获得表名
		String tablename = String.valueOf(query.getParameters().get("tablename"));
		if(StringUtil.isNotEmpty(tablename)){
			//3 档案 4 审批中 5已拒绝 
			String condition1;
			if(query.getParameters().get("tm")!=null){
				String tm = String.valueOf(query.getParameters().get("tm"));
				condition1 = "delflag = '0' AND isarchive IN (3,4,5,7) AND NVL(tm,0) like '%"+tm+"%'";
			}else{
				condition1 = "delflag = '0' AND isarchive IN (3,4,5,7)";
			}
			dataGrid.setRecordCount(customArchiveService.getEntitiesByConditions(tablename, condition1).size());
			
			List<BaseEntityInf> records = customArchiveService.getEntitiesByPaging(tablename, condition1, dataGrid.getStartRecord(),dataGrid.getPageSize());
			
			for(BaseEntityInf entity : records){
				DtoFileBase dtoFileBase = new DtoFileBase();
				dtoFileBase.setUuid(this.valueOf(entity.get("UUID")));
				dtoFileBase.setDh(this.valueOf(entity.get("DH")));
				dtoFileBase.setTm(this.valueOf(entity.get("TM")));
				dtoFileBase.setWh(this.valueOf(entity.get("WH")));
				dtoFileBase.setZrz(this.valueOf(entity.get("ZRZ")));
				dtoFileBase.setMj(this.getDicTitle("mj", this.valueOf(entity.get("MJ"))));
				dtoFileBase.setBgqx(this.getDicTitle("bgqx", this.valueOf(entity.get("BGQX"))));
				dtoFileBase.setCwrq(this.valueOf(entity.get("CWRQ")));
				dtoFileBases.add(dtoFileBase);
			}
			
			dataGrid.setExhibitDatas(dtoFileBases);
		}else{
			dataGrid.setRecordCount(0);
			dataGrid.setExhibitDatas(dtoFileBases);
		}
		
		return JSON.toJSONStringWithDateFormat(dataGrid,
				"yyyy-MM-dd HH:mm:ss",
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
	}
	
	/**
	 * @Description 分页获得编研目录
	 * @MethodName getCompileResultByPage
	 * @author bao
	 * @date 2017年6月6日
	 * @param dtGridPager
	 * @param request
	 * @return String
	 */
	@RequestMapping(value = "/getCompileResultByPage")
	@ResponseBody
	@LogService(description = "分页获取编研目录")
	public String getCompileResultByPage(String dtGridPager, HttpServletRequest request){
		DataGridQuery query = parseToQuery(dtGridPager == null ? "" : dtGridPager);
		QueryBuilder queryBuilder = query.generateQueryBuilder();
		queryBuilder.addCondition(new QueryCondition("delFlag", Integer.valueOf(0),ConditionType.EQ, FieldType.INTEGER, null));
		
		return JSON.toJSONStringWithDateFormat(fileCompilationService.getCompileResultGrid(queryBuilder, query.getNowPage(), query.getPageSize()),
				"yyyy-MM-dd HH:mm:ss",
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
	}
	
	
	@RequestMapping(value = "/getFileCompileResultByPage")
	@ResponseBody
	@LogService(description = "分页获取编研档案")
	public String getFileCompileResultByPage(String dtGridPager, HttpServletRequest request){
		DataGridQuery query = parseToQuery(dtGridPager == null ? "" : dtGridPager);
		QueryBuilder queryBuilder = query.generateQueryBuilder();
		
		DataGrid<DtoFileBase> dataGrid = new DataGrid<DtoFileBase>(query.getNowPage(), query.getPageSize());
		List<DtoFileBase> dtoFileBases = new ArrayList<DtoFileBase>();
		
		if(query.getParameters().get("compileResultIds")==null){
			dataGrid.setRecordCount(0);
			dataGrid.setExhibitDatas(dtoFileBases);
		}else{
			List<String> compileResultIds =  (List<String>)query.getParameters().get("compileResultIds");
			String compileResultIdStr = StringUtils.join(compileResultIds.toArray(), ",");
			queryBuilder.addCondition(new QueryCondition("delFlag", Integer.valueOf(0),ConditionType.EQ, FieldType.INTEGER, null));
			queryBuilder.addCondition(new QueryCondition("id",compileResultIdStr,ConditionType.IN, FieldType.STRING, "compileResult"));
			DataGrid<CompileResultMiddle> dataGrid1 = fileCompilationService.getCompileResultMiddleGrid(queryBuilder, query.getNowPage(), query.getPageSize());
			
			dataGrid.setRecordCount(dataGrid1.getRecordCount());
			for(CompileResultMiddle compileResultMiddle : dataGrid1.getExhibitDatas()){
				BaseEntityInf entity = customArchiveService.getEntity(compileResultMiddle.getBm(), compileResultMiddle.getDaid());
				DtoFileBase dtoFileBase = new DtoFileBase();
				dtoFileBase.setUuid(this.valueOf(entity.get("UUID")));
				dtoFileBase.setDh(this.valueOf(entity.get("DH")));
				dtoFileBase.setTm(this.valueOf(entity.get("TM")));
				dtoFileBase.setWh(this.valueOf(entity.get("WH")));
				dtoFileBase.setZrz(this.valueOf(entity.get("ZRZ")));
				dtoFileBase.setMj(this.getDicTitle("mj", this.valueOf(entity.get("MJ"))));
				dtoFileBase.setBgqx(this.getDicTitle("bgqx", this.valueOf(entity.get("BGQX"))));
				dtoFileBase.setCwrq(this.valueOf(entity.get("CWRQ")));
				dtoFileBase.setBm(compileResultMiddle.getBm());
				dtoFileBases.add(dtoFileBase);
			}
			
			dataGrid.setExhibitDatas(dtoFileBases);
			
		}
		return JSON.toJSONStringWithDateFormat(dataGrid,
				"yyyy-MM-dd HH:mm:ss",
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
	}
	
	/**保存编研信息
	 * @Description 
	 * @MethodName saveCompileForm
	 * @author bao
	 * @date 2017年6月5日
	 * @param request
	 * @param obj
	 * @return ResultModel<String>
	 */
	@SuppressWarnings("unused")
	@RequestMapping(value = "/saveCompileForm")
	@ResponseBody
	@LogService(description = "保存编研信息")
	public ResultModel<String> saveCompileForm(HttpServletRequest request, @RequestBody Map<String, Object> obj) {
		ResultModel<String> resultModel = new ResultModel<String>();
		try{
			String tm = (String)obj.get("tm");
			String bz = (String)obj.get("bz");
			User user = this.getCurrentUser(request);
			
			CompileResult compileResult = new CompileResult(nowTime(), tm, bz, user);
			String compileResultId = fileCompilationService.saveCompileResult(compileResult);
			List<Map<String,String>> records = (List<Map<String,String>>)obj.get("records");
			for(Map<String,String> record : records){
				String bm = record.get("bm");
				String uuid = record.get("uuid");
				CompileResultMiddle compileResultMiddle = new CompileResultMiddle();
				compileResultMiddle.setBm(bm);
				compileResultMiddle.setCompileResult(commonService.findById(compileResultId, CompileResult.class));
				compileResultMiddle.setDaid(uuid);
				fileCompilationService.saveCompileResultMiddle(compileResultMiddle);
			}
		
		} catch (ServiceException e) {
			resultModel.setSuccess(false);
			resultModel.setMsg(e.getMessage());
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("保存失败");
		}
		return resultModel;
	}
	
	/**
	 * @Description 跳转查询页面
	 * @MethodName queryView
	 * @author bao
	 * @date 2017年5月31日
	 * @param request
	 * @param tablename
	 * @return
	 * @throws ServiceException ModelAndView
	 */
	@RequestMapping(value = "/queryView")
	public ModelAndView queryView(HttpServletRequest request,String tablename) throws ServiceException {
		ModelAndView modelAndView = this.createNormalView("/web/fileCompilation/queryView.vm");
		modelAndView.addObject("tablename", tablename);
		return modelAndView;
	}
	
	/**
	 * @Description 批量删除
	 * @MethodName batchdelete
	 * @author bao
	 * @date 2017年6月6日
	 * @param request
	 * @param fileids
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/batchdelete")
	@ResponseBody
	@LogService(description = "批量删除编研成果")
	public ResultModel<String> batchdelete(HttpServletRequest request,@RequestBody Map<String, Object> obj) {
		ResultModel<String> resultModel = new ResultModel<String>();
		List<String> fileids = (List<String>)obj.get("fileids");
		try {
			for(String fileid : fileids){
				fileCompilationService.deleteCompileResult(fileid);
			}
		} catch (ServiceException e) {
			resultModel.setSuccess(false);
			resultModel.setMsg(e.getMessage());
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("删除编研成果失败");
		}
		return resultModel;
	}
	
	
	/**
	 * @Description 编研上传附件
	 * @MethodName uploadFile
	 * @author bao
	 * @date 2017年4月20日
	 * @param request
	 * @param attachments
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/uploadFile")
	@ResponseBody
	public ResultModel<String> uploadFile(HttpServletRequest request,
			@RequestParam("attachment[]") MultipartFile[] attachments,
			@RequestParam("dataCollectId") String dataCollectId){
		ResultModel<String> resultModel = new ResultModel<String>();
		
		//解析数据
		
		if(StringUtil.isEmpty(dataCollectId)){
			dataCollectId = UUID.randomUUID().toString();
		}
		List<String> msg = new ArrayList<String>();
		try {
			if (attachments != null) {
				for(int i=0;i<attachments.length;i++){
					MultipartFile atta = attachments[i];
					Ywgj ywgj = new Ywgj();
					if (!atta.isEmpty() && (atta != null && !"".equals(atta.getOriginalFilename()))) {
						String extName = atta.getOriginalFilename().substring(
								atta.getOriginalFilename().lastIndexOf("."));// 获得后缀
						String fileType = atta.getOriginalFilename().substring(
								atta.getOriginalFilename().lastIndexOf(".")+1);// 获得后缀
						String filePath = UUID.randomUUID().toString() + extName;
						String fileName = atta.getOriginalFilename();
						
						msg.add(fileName);
						
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
						
						String path = simpleDateFormat.format(new Date());
						
						String realpath = this.getFilePath() + Path.UPLOAD_BYGJ_FILE_PATH + path +"/" + filePath;
						File fileTo = new File(realpath);
						if (!fileTo.exists()) {
							fileTo.mkdirs();
						}
						atta.transferTo(fileTo);
						
						ywgj.setXsxh(i+1);
						ywgj.setWjdz(Path.UPLOAD_BYGJ_FILE_PATH+path+File.separator+ filePath);
						ywgj.setScrq(new Date());
						ywgj.setScz(getCurrentUser(request).getId());
						ywgj.setWjlx(fileType);
						ywgj.setWjdx(atta.getSize());
						ywgj.setWjm(fileName);
						ywgj.setZlsj(dataCollectId);
						try {
							ywgjService.saveAttachment(ywgj);
						} catch (ServiceException e) {
							resultModel.setSuccess(false);
							resultModel.setMsg(e.getMessage());
						} catch (Exception e) {
							resultModel.setSuccess(false);
							resultModel.setMsg(e.getMessage());
						}
					}
				}
			}
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("附件上传失败");
		}
		resultModel.setMsg("资料"+StringUtils.join(msg.toArray(),",")+"上传成功");
		resultModel.setData(dataCollectId);
		return resultModel;
	}
	
}
