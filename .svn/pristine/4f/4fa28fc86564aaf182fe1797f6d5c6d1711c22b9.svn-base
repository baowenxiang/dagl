package cn.proem.dagl.web.preArchive.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import cn.proem.core.annotation.LogService;
import cn.proem.core.dao.GeneralDao;
import cn.proem.core.model.ConditionType;
import cn.proem.core.model.DataGrid;
import cn.proem.core.model.FieldType;
import cn.proem.core.model.Order;
import cn.proem.core.model.OrderType;
import cn.proem.core.model.QueryBuilder;
import cn.proem.core.model.QueryCondition;
import cn.proem.dagl.web.preArchive.entity.Ywgj;
import cn.proem.dagl.web.preArchive.entity.Zlsj;
import cn.proem.dagl.web.preArchive.service.ZlsjService;
import cn.proem.suw.web.common.exception.ServiceException;
import cn.proem.suw.web.common.util.StringUtil;

@Service
public class ZlsjServiceImpl implements ZlsjService {
	@Autowired
	private GeneralDao generalDao;
	
	@Override
	public DataGrid<Zlsj> getZlsjDataGrid(QueryBuilder queryBuilder,int nowPage, int pageSize) {
		DataGrid<Zlsj> dataGrid = new DataGrid<Zlsj>(nowPage, pageSize);
		dataGrid.setRecordCount(generalDao.countByCriteria(Zlsj.class, queryBuilder));
		
		List<Zlsj> list = new ArrayList<Zlsj>();
		list = generalDao.queryByCriteria(Zlsj.class, queryBuilder, null,dataGrid.getStartRecord(), dataGrid.getPageSize());
		
		dataGrid.setExhibitDatas(list);
		return dataGrid;
	}

	@Override
	public DataGrid<Ywgj> getYwgjDataGrid(QueryBuilder queryBuilder,int nowPage, int pageSize) {
		DataGrid<Ywgj> dataGrid = new DataGrid<Ywgj>(nowPage, pageSize);
		dataGrid.setRecordCount(generalDao.countByCriteria(Ywgj.class, queryBuilder));
		
		List<Ywgj> list = new ArrayList<Ywgj>();
		list = generalDao.queryByCriteria(Ywgj.class, queryBuilder, null,dataGrid.getStartRecord(), dataGrid.getPageSize());
		
		dataGrid.setExhibitDatas(list);
		return dataGrid;
		
	}

	@Override
	@Transactional
	@LogService(description = "保存资料收集")
	public String saveAttachment(Zlsj zlsj) throws ServiceException {
		return generalDao.save(zlsj);
	}
	
	
	@Override
	@Transactional
	@LogService(description = "删除对应资料下的原文")
	public Boolean deleteYwgz(String zlsjId){
		try {
			QueryBuilder queryBuilder = new QueryBuilder();
			queryBuilder.addCondition(new QueryCondition("zlsj",zlsjId,ConditionType.EQ, FieldType.STRING,null));
			List<Ywgj> ywgjs = generalDao.queryByCriteria(Ywgj.class, queryBuilder, null, 0, -1);
			for(Ywgj ywgj : ywgjs){
				ywgj.setDelFlag(1);
				generalDao.update(ywgj);
			}
		} catch (Exception e) {
			return false;
			
		}
		
		return true;
	
	}

	@Override
	@Transactional
	@LogService(description = "删除对应资料")
	public void deleteZlsj(String zlsjId) throws ServiceException {
		Zlsj zlsj = generalDao.findById(zlsjId,Zlsj.class);
		zlsj.setDelFlag(1);
		generalDao.update(zlsj);
	}

	@Override
	public List<Ywgj> getFilesByZlsjId(String id) {
		QueryBuilder queryBuilder = new QueryBuilder();
		queryBuilder.addCondition(new QueryCondition("zlsj",id,ConditionType.EQ, FieldType.STRING, null));
		queryBuilder.addCondition(new QueryCondition("delFlag",Integer.valueOf(0),ConditionType.EQ, FieldType.INTEGER, null));
		List<Ywgj> ywgjs = generalDao.queryByCriteria(Ywgj.class, queryBuilder,new Order[]{new Order("xsxh", OrderType.ASC)}, 0, -1);
		return ywgjs;
	}

	@Override
	@Transactional
	@LogService(description = "修改资料收集")
	public void updateZlsj(Zlsj zlsj) throws ServiceException {
		if (StringUtil.isEmpty(zlsj.getId())) {
			throw new ServiceException("资料id不能为空");
		}
		generalDao.update(zlsj);
		
	}
	
	
}
