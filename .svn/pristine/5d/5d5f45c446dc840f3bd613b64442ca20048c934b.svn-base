package cn.proem.dagl.web.preArchive.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;

import cn.proem.suw.web.common.constant.Path;
import cn.proem.suw.web.common.exception.ServiceException;
import cn.proem.suw.web.common.model.BaseCtrlModel;
import cn.proem.suw.web.common.model.ResultModel;
import cn.proem.core.entity.User;
import cn.proem.core.entity.UserDepartment;
import cn.proem.core.model.ConditionType;
import cn.proem.core.model.DataGridQuery;
import cn.proem.core.model.FieldType;
import cn.proem.core.model.QueryBuilder;
import cn.proem.core.model.QueryCondition;
import cn.proem.core.util.BeanUtils;
import cn.proem.dagl.web.archives.entity.DField;
import cn.proem.dagl.web.archives.service.CustomArchiveService;
import cn.proem.dagl.web.dicManager.entity.DictionaryValue;
import cn.proem.dagl.web.dicManager.service.DicManagerService;
import cn.proem.dagl.web.preArchive.dto.DtoZlsj;
import cn.proem.dagl.web.preArchive.entity.Ywgj;
import cn.proem.dagl.web.preArchive.entity.Zlsj;
import cn.proem.dagl.web.preArchive.service.YwgjService;
import cn.proem.dagl.web.preArchive.service.ZlsjService;
import cn.proem.dagl.web.table.entity.inf.BaseEntityInf;
import cn.proem.suw.web.common.service.CommonService;
import cn.proem.suw.web.common.util.StringUtil;


/**
 * 资料收集控制层
 * @author bao
 *
 */
@Controller
@RequestMapping(value = "/w/zlzl/zlsj")
public class ZlsjController extends BaseCtrlModel {
	@Autowired
	private YwgjService ywgjService;
	@Autowired
	private ZlsjService zlsjService;
	@Autowired
	private CommonService commonService;
	@Autowired
	private DicManagerService dicManagerService;
	@Autowired
	private CustomArchiveService customArchiveService;
	
	/**
	 * @Description 原文挂接 
	 * @MethodName initView
	 * @author bao
	 * @date 2017年4月20日
	 * @param request
	 * @return ModelAndView
	 */
	@RequestMapping(value = "/initView")
	public ModelAndView initView(HttpServletRequest request) {
		ModelAndView modelAndView = this.createNormalView("/web/zlzl/zlsj/dataCollect.vm");
		
		
		return modelAndView;
	}
	
	
	/**
	 * @Description 修改资料收集(上传和修改操作)
	 * @MethodName uploadFile
	 * @author bao
	 * @date 2017年4月20日
	 * @param request
	 * @param attachments
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/uploadFile")
	@ResponseBody
	public ResultModel<String> uploadFile(HttpServletRequest request,
			@RequestParam("attachment[]") MultipartFile[] attachments,
			@RequestParam("dataCollectId") String dataCollectId){
		ResultModel<String> resultModel = new ResultModel<String>();
		
		//解析数据
		
		if(StringUtil.isEmpty(dataCollectId)){
			dataCollectId = UUID.randomUUID().toString();
		}
		List<String> msg = new ArrayList<String>();
		try {
			if (attachments != null) {
				for(int i=0;i<attachments.length;i++){
					MultipartFile atta = attachments[i];
					Ywgj ywgj = new Ywgj();
					if (!atta.isEmpty() && (atta != null && !"".equals(atta.getOriginalFilename()))) {
						String extName = atta.getOriginalFilename().substring(
								atta.getOriginalFilename().lastIndexOf("."));// 获得后缀
						String fileType = atta.getOriginalFilename().substring(
								atta.getOriginalFilename().lastIndexOf(".")+1);// 获得后缀
						String filePath = UUID.randomUUID().toString() + extName;
						String fileName = atta.getOriginalFilename();
						
						msg.add(fileName);
						
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
						
						String path = simpleDateFormat.format(new Date());
						
						String realpath = this.getFilePath() + Path.UPLOAD_YWGJ_FILE_PATH + path +"/" + filePath;
						File fileTo = new File(realpath);
						if (!fileTo.exists()) {
							fileTo.mkdirs();
						}
						atta.transferTo(fileTo);
						
						ywgj.setXsxh(i+1);
						ywgj.setWjdz(Path.UPLOAD_YWGJ_FILE_PATH+path+File.separator+ filePath);
						ywgj.setScrq(new Date());
						ywgj.setScz(getCurrentUser(request).getId());
						ywgj.setWjlx(fileType);
						ywgj.setWjdx(atta.getSize());
						ywgj.setWjm(fileName);
						ywgj.setZlsj(dataCollectId);
						try {
							ywgjService.saveAttachment(ywgj);
						} catch (ServiceException e) {
							resultModel.setSuccess(false);
							resultModel.setMsg(e.getMessage());
						} catch (Exception e) {
							resultModel.setSuccess(false);
							resultModel.setMsg(e.getMessage());
						}
					}
				}
			}
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("附件上传失败");
		}
		resultModel.setMsg("资料"+StringUtils.join(msg.toArray(),",")+"上传成功");
		resultModel.setData(dataCollectId);
		return resultModel;
	}
	
	
	
	@RequestMapping(value = "/getZlsjList")
	@ResponseBody
	public String getDataList(String dtGridPager, HttpServletRequest request){
		User user = this.getCurrentUser(request);
		DataGridQuery query = parseToQuery(dtGridPager == null ? "" : dtGridPager);
		QueryBuilder queryBuilder = query.generateQueryBuilder();
		queryBuilder.addCondition(new QueryCondition("delFlag", Integer.valueOf(0),ConditionType.EQ, FieldType.INTEGER, null));
		
		
		try {
			UserDepartment department = commonService.findUserDepartmentByUserId(user.getId());
			if(commonService.isAdminOrFileAdmin(user)){
				List<User> users = commonService.findUsersByDeptId(department.getDepartment().getId());
				List<String> userList = new ArrayList<String>();
				for(User u : users){
					userList.add(u.getId());
				}
				String str = StringUtils.join(userList.toArray(), ",");
				if(users.size()>0){
					queryBuilder.addCondition(new QueryCondition("createId", str,ConditionType.IN, FieldType.STRING, null));
				}else{
					queryBuilder.addCondition(new QueryCondition("createId", null,ConditionType.NULL, FieldType.STRING, null));
				}
			}else{
				queryBuilder.addCondition(new QueryCondition("createId", user.getId(),ConditionType.EQ, FieldType.STRING, null));
			}
				
		} catch (ServiceException e) {
			return JSON.toJSONStringWithDateFormat("",
					"yyyy-MM-dd HH:mm:ss",
					SerializerFeature.WriteDateUseDateFormat,
					SerializerFeature.DisableCircularReferenceDetect);
		}
		
		return JSON.toJSONStringWithDateFormat(zlsjService.getZlsjDataGrid(
				queryBuilder, query.getNowPage(), query.getPageSize()),
				"yyyy-MM-dd HH:mm:ss",
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
	}
	
	@RequestMapping(value = "/getYwgzList")
	@ResponseBody
	public String getYwgzList(String dtGridPager, HttpServletRequest request){
		DataGridQuery query = parseToQuery(dtGridPager == null ? "" : dtGridPager);
		QueryBuilder queryBuilder = query.generateQueryBuilder();
		
		return JSON.toJSONStringWithDateFormat(zlsjService.getYwgjDataGrid(
				queryBuilder, query.getNowPage(), query.getPageSize()),
				"yyyy-MM-dd HH:mm:ss",
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
		
	}
	
	/**
	 * @Description 根据资料id逻辑删除资料及下属原文
	 * @MethodName deleteZlsjById
	 * @author bao
	 * @date 2017年4月21日
	 * @param request
	 * @param id
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/deleteZlsjById")
	@ResponseBody
	public ResultModel<String> deleteZlsjById(HttpServletRequest request,@RequestParam("id")String id){
		ResultModel<String> resultModel = new ResultModel<String>();
		try {
			if(zlsjService.deleteYwgz(id)){
				zlsjService.deleteZlsj(id);
			}
		} catch (ServiceException e) {
			resultModel.setSuccess(false);
			resultModel.setMsg(e.getMessage());
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("删除资料失败");
		}
		return resultModel;
	}
	
	/**
	 * @Description 根据资料id获取信息
	 * @MethodName getDataInfoById
	 * @author bao
	 * @date 2017年4月21日
	 * @param request
	 * @param id
	 * @return ResultModel<DtoZlsj>
	 */
	@RequestMapping(value = "/getDataInfoById")
	@ResponseBody
	public ResultModel<DtoZlsj> getDataInfoById(HttpServletRequest request,@RequestParam("id")String id){
		ResultModel<DtoZlsj> resultModel = new ResultModel<DtoZlsj>();
		DtoZlsj dtoZlsj = new DtoZlsj();
		
		Zlsj zlsj = commonService.findById(id, Zlsj.class);
		List<Ywgj> files = zlsjService.getFilesByZlsjId(id);
		
		dtoZlsj.setData(zlsj);
		dtoZlsj.setFiles(files);
		
		resultModel.setData(dtoZlsj);
		return resultModel;
	}
	
	/**
	 * @Description 修改资料操作
	 * @MethodName updateDateCollect
	 * @author bao
	 * @date 2017年4月22日
	 * @param request
	 * @param obj
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/updateDateCollect")
	@ResponseBody
	public ResultModel<String> updateDateCollect(HttpServletRequest request, @RequestBody Map<String, Object> obj) {
		ResultModel<String> resultModel = new ResultModel<String>();
		try {
			Zlsj zlsj = BeanUtils.cloneObject(Zlsj.class, obj.get("dataCollect"));
			zlsjService.updateZlsj(zlsj);
		}catch (ServiceException e) {
			resultModel.setSuccess(false);
			resultModel.setMsg(e.getMessage());
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("修改失败");
		}
		
		return resultModel;
	}
	
	
	/**
	 * @Description 资料转换成预归档
	 * @MethodName dataCollectToPreArchive
	 * @author bao
	 * @date 2017年5月10日
	 * @param request
	 * @param obj
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/dataCollectToPreArchive")
	@ResponseBody
	public ResultModel<String> dataCollectToPreArchive(HttpServletRequest request, @RequestBody Map<String, Object> obj){
		ResultModel<String> resultModel = new ResultModel<String>();
		User user = this.getCurrentUser(request);
		
		try {
			List<String> dataCollectIds = (List<String>)obj.get("dataCollectIds");
			String tablename = (String)obj.get("tablename");
			
			for(String dataId : dataCollectIds){
				Zlsj zlsj = commonService.findById(dataId, Zlsj.class);
				
				BaseEntityInf entity = customArchiveService.getEntity(tablename);
				 // UUID 资料id
	            entity.set(DField.UUID, zlsj.getId());
	            //设置集团号
	            entity.set(DField.NOWCAMP, getDepartment(user));
	            //设置新建时间
	            entity.set(DField.CREATETIME, nowTime());
	            //设置默认的归档状态
	            entity.set(DField.CREATEUSER, user.getId());
	            //设置默认删除标识
	            entity.set(DField.DELFLAG, "0");
	            //设置默认的归档状态
	            entity.set(DField.ISARCHIVE,"0");
				
				
				entity.set("TM", zlsj.getTm());
				entity.set("ZRZ", zlsj.getZrz());
				entity.set("CWRQ", zlsj.getCwrq());
				entity.set("WH", zlsj.getWh());
				
				customArchiveService.save(entity);
				
				zlsjService.deleteZlsj(dataId);
				
			}
		
		}catch (ServiceException e) {
			resultModel.setSuccess(false);
			resultModel.setMsg(e.getMessage());
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("保存失败");
		}
		return resultModel;
	}
	
	
	/**
	 * @Description 获得档案类型
	 * @MethodName getFileTypeByDicno
	 * @author bao
	 * @date 2017年5月17日
	 * @param request
	 * @param dno
	 * @return ResultModel<DictionaryValue>
	 */
	@RequestMapping(value = "/getFileTypeByDicno")
	@ResponseBody
	public ResultModel<DictionaryValue> getFileTypeByDicno(HttpServletRequest request,String dno){
		ResultModel<DictionaryValue> resultModel = new ResultModel<DictionaryValue>();
		List<DictionaryValue> dictionaryValues = dicManagerService.getDicValueList(dno);
		
		resultModel.setDatas(dictionaryValues);
		return resultModel;
	}
	
	/**
	 * @Description 导入的上传文件模态框界面
	 * @MethodName importView
	 * @author bao
	 * @date 2017年5月2日
	 * @param request
	 * @param tablename
	 * @return
	 * @throws ServiceException
	 *             ModelAndView
	 */
	@RequestMapping(value = "/importView/{tablename}")
	public ModelAndView importView(HttpServletRequest request,
			@PathVariable("tablename") String tablename)
			throws ServiceException {
		ModelAndView modelAndView = this.createNormalView("/web/zlzl/zlsj/importView.vm");
		modelAndView.addObject("tablename", tablename);
		return modelAndView;
	}
	
	
	/**
	 * @Description 增加页面
	 * @MethodName adddetail
	 * @author bao
	 * @date 2017年5月27日
	 * @param request
	 * @param tablename
	 * @return
	 * @throws ServiceException ModelAndView
	 */
	@RequestMapping(value = "/adddetail/{tablename}")
	public ModelAndView adddetail(HttpServletRequest request,@PathVariable("tablename") String tablename)throws ServiceException {
		ModelAndView modelAndView = this.createNormalView("/web/zlzl/zlsj/adddetail.vm");
		
		modelAndView.addObject("tablename", tablename);
		return modelAndView;
	}
	
	
	/**
	 * @Description 查看页面
	 * @MethodName detail
	 * @author bao
	 * @date 2017年5月27日
	 * @param request
	 * @param tablename
	 * @return
	 * @throws ServiceException ModelAndView
	 */
	@RequestMapping(value = "/detail/{tablename}/{dataId}")
	public ModelAndView detail(HttpServletRequest request,@PathVariable("tablename") String tablename,@PathVariable("dataId") String dataId)throws ServiceException {
		ModelAndView modelAndView = this.createNormalView("/web/zlzl/zlsj/detail.vm");
		
		modelAndView.addObject("tablename", tablename);
		modelAndView.addObject("dataId", dataId);
		return modelAndView;
	}
	
	/**
	 * @Description 添加资料操作
	 * @MethodName saveZlsc
	 * @author bao
	 * @date 2017年5月27日
	 * @param request
	 * @param attachments
	 * @param tablename
	 * @param tm
	 * @param zrz
	 * @param cwrq
	 * @param wh
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/saveZlsc")
	@ResponseBody
	public ResultModel<String> saveZlsc(HttpServletRequest request,
			@RequestParam("attachment[]") MultipartFile[] attachments,
			@RequestParam("tablename") String tablename,
			@RequestParam("tm") String tm,
			@RequestParam("zrz") String zrz,
			@RequestParam("cwrq") String cwrq,
			@RequestParam("wh") String wh){
		ResultModel<String> resultModel = new ResultModel<String>();
		List<String> msg = new ArrayList<String>();
		try {
			SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			Zlsj zlsj = new Zlsj();
			zlsj.setDrsj(simpleDateFormat1.format(new Date()));
			zlsj.setCreateId(this.getCurrentUser(request).getId());
			zlsj.setDrz(this.getCurrentUser(request).getName());
			zlsj.setCreateTime(new Date());
			zlsj.setDelFlag(0);
			zlsj.setTm(tm);
			zlsj.setCwrq(cwrq);
			zlsj.setWh(wh);
			zlsj.setZrz(zrz);
				try {
					String zlsjId = zlsjService.saveAttachment(zlsj);
				} catch (ServiceException e) {
					resultModel.setSuccess(false);
					resultModel.setMsg(e.getMessage());
				} catch (Exception e) {
					resultModel.setSuccess(false);
					resultModel.setMsg(e.getMessage());
				}
				for(int i=0;i<attachments.length;i++){
					MultipartFile atta = attachments[i];
					Ywgj ywgj = new Ywgj();
					if (!atta.isEmpty() && (atta != null && !"".equals(atta.getOriginalFilename()))) {
						String extName = atta.getOriginalFilename().substring(
								atta.getOriginalFilename().lastIndexOf("."));// 获得后缀
						String fileType = atta.getOriginalFilename().substring(
								atta.getOriginalFilename().lastIndexOf(".")+1);// 获得后缀
						String filePath = UUID.randomUUID().toString() + extName;
						String fileName = atta.getOriginalFilename();
						
						msg.add(fileName);
						
						SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
						
						String path = simpleDateFormat.format(new Date());
						
						String realpath = this.getFilePath() + Path.UPLOAD_YWGJ_FILE_PATH + path +"/"+ filePath;
						File fileTo = new File(realpath);
						if (!fileTo.exists()) {
							fileTo.mkdirs();
						}
						atta.transferTo(fileTo);
						
						ywgj.setXsxh(i+1);
						ywgj.setWjdz(Path.UPLOAD_YWGJ_FILE_PATH+path+File.separator+ filePath);
						ywgj.setScrq(new Date());
						ywgj.setScz(getCurrentUser(request).getId());
						ywgj.setWjlx(fileType);
						ywgj.setWjdx(atta.getSize());
						ywgj.setWjm(fileName);
						ywgj.setZlsj(zlsj.getId());
						ywgj.setCreateTime(new Date());
						ywgj.setDelFlag(0);
						
						try {
							ywgjService.saveAttachment(ywgj);
						} catch (ServiceException e) {
							resultModel.setSuccess(false);
							resultModel.setMsg(e.getMessage());
						} catch (Exception e) {
							resultModel.setSuccess(false);
							resultModel.setMsg(e.getMessage());
						}
					}
				}
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("附件上传失败");
		}
		resultModel.setMsg("资料"+StringUtils.join(msg.toArray(),",")+"上传成功");
		return resultModel;
	}
	
	
	/**
	 * @Description 修改资料操作
	 * @MethodName updateDateCollect
	 * @author bao
	 * @date 2017年4月22日
	 * @param request
	 * @param obj
	 * @return ResultModel<String>
	 */
	@RequestMapping(value = "/updateZlsj")
	@ResponseBody
	public ResultModel<String> updateZlsj(HttpServletRequest request, 
			@RequestBody Map<String, Object> data) {
		ResultModel<String> resultModel = new ResultModel<String>();
		try {
			Map<String, String> obj = (Map<String, String>)data.get("data");
			Zlsj zlsj = commonService.findById(obj.get("dataId"),Zlsj.class);
			zlsj.setTm(obj.get("tm"));
			zlsj.setCwrq(obj.get("cwrq"));
			zlsj.setWh(obj.get("wh"));
			zlsj.setZrz(obj.get("zrz"));
			zlsjService.updateZlsj(zlsj);
		}catch (ServiceException e) {
			resultModel.setSuccess(false);
			resultModel.setMsg(e.getMessage());
		} catch (Exception e) {
			resultModel.setSuccess(false);
			resultModel.setMsg("修改失败");
		}
		
		return resultModel;
	}
	
	/**
	 * @Description 进入资料整理页面
	 * @MethodName dataCollectView
	 * @author bao
	 * @date 2017年6月1日
	 * @param request
	 * @return ModelAndView
	 */
	@RequestMapping(value = "/dataCollectView")
	public ModelAndView dataCollectView(HttpServletRequest request,String dataCollectId) {
		ModelAndView modelAndView = this.createNormalView("/web/zlzl/zlsj/dataCollectView.vm");
		modelAndView.addObject("dataCollectId", dataCollectId);
		
		return modelAndView;
	}
	
	/**
	 * @Description 获得集团号
	 * @MethodName getDepartment
	 * @author bao
	 * @date 2017年6月2日
	 * @param user
	 * @return
	 * @throws ServiceException String
	 */
	private String getDepartment(User user) throws ServiceException{
        // 用户部门
        UserDepartment userdepartment = commonService.findUserDepartmentByUserId(user.getId());
        if(userdepartment != null){
            // 部门
            String department = userdepartment.getDepartment() != null ? userdepartment.getDepartment().getId() : "";
            return department;
        }
        return "";
    }
    
	
	/**
     * @Method: nowTime 
     * @Description: 获得当前时间
     * @return
     */
    private String nowTime(){
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
        return df.format(new Date());// new Date()为获取当前系统时间
    }
}

	




